// Code generated by MockGen. DO NOT EDIT.
// Source: expr_demo/internal/pkg/script_env (interfaces: DataRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDataRepo is a mock of DataRepo interface.
type MockDataRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDataRepoMockRecorder
}

// MockDataRepoMockRecorder is the mock recorder for MockDataRepo.
type MockDataRepoMockRecorder struct {
	mock *MockDataRepo
}

// NewMockDataRepo creates a new mock instance.
func NewMockDataRepo(ctrl *gomock.Controller) *MockDataRepo {
	mock := &MockDataRepo{ctrl: ctrl}
	mock.recorder = &MockDataRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataRepo) EXPECT() *MockDataRepoMockRecorder {
	return m.recorder
}

// GetStringsFromData mocks base method.
func (m *MockDataRepo) GetStringsFromData(arg0, arg1, arg2 string, arg3 []interface{}) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringsFromData", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStringsFromData indicates an expected call of GetStringsFromData.
func (mr *MockDataRepoMockRecorder) GetStringsFromData(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringsFromData", reflect.TypeOf((*MockDataRepo)(nil).GetStringsFromData), arg0, arg1, arg2, arg3)
}
